{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IDispas.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport { DataTypes } from \"../protocol/libraries/DataTypes.sol\";\n\n/**\n * @title IDispas - Interface for LYX Distribution Contract\n * @author Valentine Orga\n * @notice Defines the interface for Dispas, a contract that allows LYX distribution to multiple addresses.\n */\ninterface IDispas {\n    /// @notice Emitted when LYX is successfully distributed to multiple recipients.\n    /// @param sender The address that initiated the distribution.\n    /// @param totalAmount The total LYX amount distributed.\n    event FundsDistributed(address indexed sender, uint256 totalAmount);\n\n    /// @notice Emitted when a single recipient successfully receives LYX.\n    /// @param recipient The address that received the payment.\n    /// @param amount The amount of LYX sent.\n    event PaymentSent(address indexed recipient, uint256 amount);\n\n    /**\n     * @notice Distributes LYX to multiple recipients.\n     * @dev Requires that each recipient is a valid address and receives a non-zero amount.\n     *      The total distributed amount must match `msg.value`.\n     * @param payments An array of `Payment` structs containing recipient addresses and corresponding amounts.\n     */\n    function distributeFunds(DataTypes.Payment[] calldata payments) external payable;\n}\n"
    },
    "contracts/interfaces/IERC5564Announcer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\ninterface IERC5564Announcer {\n    /**\n     * @dev Emitted when a stealth transfer is announced\n     * @param schemeId The ID of the stealth address scheme (1 for secp256k1)\n     * @param stealthAddress The stealth address where funds were sent\n     * @param caller The address that called the announce function\n     * @param ephemeralPubKey The ephemeral public key used to generate the stealth address\n     * @param metadata Additional metadata about the transfer\n     */\n    event Announcement(\n        uint256 indexed schemeId,\n        address indexed stealthAddress,\n        address indexed caller,\n        bytes ephemeralPubKey,\n        bytes metadata\n    );\n\n    /**\n     * @dev Announces a stealth transfer\n     * @param schemeId The ID of the stealth address scheme\n     * @param stealthAddress The stealth address where funds were sent\n     * @param ephemeralPubKey The ephemeral public key used to generate the stealth address\n     * @param metadata Additional metadata about the transfer\n     */\n    function announce(\n        uint256 schemeId,\n        address stealthAddress,\n        bytes memory ephemeralPubKey,\n        bytes memory metadata\n    ) external;\n} "
    },
    "contracts/protocol/DisapStealth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport { IDispas } from \"../interfaces/IDispas.sol\";\nimport { DataTypes } from \"./libraries/DataTypes.sol\";\nimport { IERC5564Announcer } from \"../interfaces/IERC5564Announcer.sol\";\nimport { StealthAddressLib } from \"./libraries/StealthAddress.sol\";\n\n/**\n * @title DispasStealth - A Gas-Efficient LYX Distributor with Stealth Address Support\n * @author Tantodefi.eth and Valentine Orga\n * @notice This contract allows users to split LYX payments among multiple recipients using stealth addresses\n * @dev Extends Dispas with ERC-5564 stealth address support\n */\ncontract DispasStealth is IDispas {\n    // ==========================\n    // Constants\n    // ==========================\n    IERC5564Announcer public immutable STEALTH_ANNOUNCER;\n    uint256 constant SCHEME_ID = 1; // Using the default SECP256k1 scheme\n\n    // ==========================\n    // Errors\n    // ==========================\n    error DispasStealth__ZeroAddress();\n    error DispasStealth__ZeroAmount();\n    error DispasStealth__InsufficientValue();\n    error DispasStealth__TransferFailed(address recipient, uint256 amount);\n    error DispasStealth__InvalidStealthMetaAddress();\n\n    // ==========================\n    // Events\n    // ==========================\n    event StealthPaymentSent(\n        address indexed sender,\n        bytes stealthMetaAddress,\n        address indexed stealthAddress,\n        uint256 amount\n    );\n\n    // ==========================\n    // Structs\n    // ==========================\n    struct StealthPayment {\n        bytes stealthMetaAddress;\n        uint256 amount;\n    }\n\n    // ==========================\n    // Functions\n    // ==========================\n\n    constructor(address announcer) {\n        STEALTH_ANNOUNCER = IERC5564Announcer(announcer);\n    }\n\n    /// @inheritdoc IDispas\n    function distributeFunds(DataTypes.Payment[] calldata payments) external payable {\n        uint256 distributedAmount = 0;\n        uint256 paymentsLength = payments.length;\n\n        for (uint256 i = 0; i < paymentsLength; i++) {\n            DataTypes.Payment calldata payment = payments[i];\n            \n            require(payment.recipient != address(0), \"DispasStealth__ZeroAddress\");\n            require(payment.amount != 0, \"DispasStealth__ZeroAmount\");\n\n            distributedAmount += payment.amount;\n            if (distributedAmount > msg.value) revert DispasStealth__InsufficientValue();\n\n            (bool success, ) = payment.recipient.call{ value: payment.amount }(\"\");\n            require(success, \"DispasStealth__TransferFailed\");\n        }\n\n        emit FundsDistributed(msg.sender, msg.value);\n    }\n\n    /// @notice Distributes funds to stealth addresses\n    /// @param payments Array of stealth payments to process\n    function distributeStealthFunds(StealthPayment[] calldata payments) external payable {\n        uint256 distributedAmount = 0;\n        uint256 paymentsLength = payments.length;\n\n        for (uint256 i = 0; i < paymentsLength; i++) {\n            StealthPayment calldata payment = payments[i];\n            require(payment.amount != 0, \"DispasStealth__ZeroAmount\");\n\n            // Parse stealth meta-address and generate stealth address\n            (bytes memory spendingPubKey, bytes memory viewingPubKey) = \n                StealthAddressLib.parseStealthMetaAddress(payment.stealthMetaAddress);\n                \n            // Generate ephemeral key and stealth address\n            (address stealthAddress, bytes memory ephemeralPubKey, bytes1 viewTag) = \n                StealthAddressLib.generateStealthAddress(spendingPubKey, viewingPubKey);\n\n            distributedAmount += payment.amount;\n            if (distributedAmount > msg.value) revert DispasStealth__InsufficientValue();\n\n            // Send payment to stealth address\n            (bool success, ) = stealthAddress.call{ value: payment.amount }(\"\");\n            require(success, \"DispasStealth__TransferFailed\");\n\n            // Announce the stealth payment\n            bytes memory metadata = generateMetadata(viewTag, payment.amount);\n            STEALTH_ANNOUNCER.announce(\n                SCHEME_ID,\n                stealthAddress,\n                ephemeralPubKey,\n                metadata\n            );\n\n            emit StealthPaymentSent(\n                msg.sender,\n                payment.stealthMetaAddress,\n                stealthAddress,\n                payment.amount\n            );\n        }\n\n        emit FundsDistributed(msg.sender, msg.value);\n    }\n\n    /// @dev Generates metadata for the stealth announcement\n    /// @param viewTag The view tag for the stealth address\n    /// @param amount The amount being sent\n    function generateMetadata(bytes1 viewTag, uint256 amount) internal pure returns (bytes memory) {\n        bytes memory metadata = new bytes(57);\n        \n        // First byte is view tag\n        metadata[0] = viewTag;\n        \n        // Bytes 2-5 are 0xeeeeeeee for native token\n        metadata[1] = 0xee;\n        metadata[2] = 0xee;\n        metadata[3] = 0xee;\n        metadata[4] = 0xee;\n        \n        // Bytes 6-25 are the ETH pseudo-address\n        address eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n        assembly {\n            mstore(add(metadata, 26), eth)\n        }\n        \n        // Bytes 26-57 are the amount\n        assembly {\n            mstore(add(metadata, 58), amount)\n        }\n        \n        return metadata;\n    }\n\n    /// @dev Fallback function to prevent accidental LYX deposits\n    receive() external payable {\n        revert(\"Direct deposits not allowed\");\n    }\n} "
    },
    "contracts/protocol/DispasStealth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../interfaces/IERC5564Announcer.sol\";\n\ncontract DispasStealth {\n    IERC5564Announcer public immutable STEALTH_ANNOUNCER;\n    uint256 public constant SCHEME_ID = 1; // SECP256K1 scheme\n\n    mapping(address => bytes32) private stealthMetadata;\n    \n    event StealthMetadataRegistered(address indexed account, bytes32 metadata);\n    event StealthTransfer(\n        address indexed from,\n        address indexed to,\n        address ephemeralAddress,\n        uint256 amount\n    );\n\n    constructor(address announcer) {\n        require(announcer != address(0), \"Zero address\");\n        STEALTH_ANNOUNCER = IERC5564Announcer(announcer);\n    }\n\n    function registerStealthMetadata(address account, bytes32 metadata) external {\n        require(msg.sender == account, \"Not authorized\");\n        stealthMetadata[account] = metadata;\n        emit StealthMetadataRegistered(account, metadata);\n    }\n\n    function getStealthMetadata(address account) external view returns (bytes32) {\n        return stealthMetadata[account];\n    }\n\n    function sendStealthTransfer(\n        address from,\n        address to,\n        address ephemeralAddress\n    ) external payable {\n        require(msg.value > 0, \"Zero amount\");\n        require(stealthMetadata[to] != bytes32(0), \"Recipient has no stealth metadata\");\n        \n        // Transfer the funds\n        (bool success, ) = to.call{value: msg.value}(\"\");\n        require(success, \"Transfer failed\");\n\n        // Announce the transfer\n        STEALTH_ANNOUNCER.announce(\n            SCHEME_ID,\n            ephemeralAddress,\n            abi.encodePacked(stealthMetadata[to]),\n            abi.encode(msg.value)\n        );\n\n        emit StealthTransfer(from, to, ephemeralAddress, msg.value);\n    }\n\n    function getAnnouncements(address recipient) external view returns (\n        Announcement[] memory\n    ) {\n        // Implementation depends on how you want to store/retrieve announcements\n        // This is a placeholder - you'll need to implement the actual logic\n        Announcement[] memory announcements = new Announcement[](1);\n        return announcements;\n    }\n\n    struct Announcement {\n        address recipient;\n        address ephemeralAddress;\n        uint256 amount;\n    }\n} "
    },
    "contracts/protocol/ERC5564Announcer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport { IERC5564Announcer } from \"../interfaces/IERC5564Announcer.sol\";\n\ncontract ERC5564Announcer is IERC5564Announcer {\n    function announce(\n        uint256 schemeId,\n        address stealthAddress,\n        bytes memory ephemeralPubKey,\n        bytes memory metadata\n    ) external {\n        emit Announcement(\n            schemeId,\n            stealthAddress,\n            msg.sender,\n            ephemeralPubKey,\n            metadata\n        );\n    }\n} "
    },
    "contracts/protocol/libraries/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title DataTypes Library\n * @author\n * @notice Defines common data structures used in the Dispas contract.\n * @dev This library is used to standardize data structures across the contract.\n */\nlibrary DataTypes {\n    /**\n     * @notice Represents a payment entry in the distribution process.\n     * @dev Used in the `distributeFunds` function to store recipient details.\n     * @param recipient The address receiving the payment.\n     * @param amount The amount of LYX to be sent.\n     */\n    struct Payment {\n        address recipient;\n        uint256 amount;\n    }\n}\n"
    },
    "contracts/protocol/libraries/StealthAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nlibrary StealthAddressLib {\n    error InvalidStealthMetaAddress();\n    error InvalidSchemeId();\n\n    /**\n     * @dev Parse a stealth meta-address into its components\n     * @param metaAddress The stealth meta-address in bytes format\n     * @return spendingPubKey The spending public key\n     * @return viewingPubKey The viewing public key\n     */\n    function parseStealthMetaAddress(bytes calldata metaAddress) \n        internal \n        pure \n        returns (bytes memory spendingPubKey, bytes memory viewingPubKey) \n    {\n        // Validate meta-address format (st:lyx: + 64 bytes spending + 64 bytes viewing)\n        if (metaAddress.length < 133) revert InvalidStealthMetaAddress();\n\n        // Extract public keys from meta-address\n        // Format: st:lyx:<spending_pub_key>:<viewing_pub_key>\n        spendingPubKey = new bytes(64);\n        viewingPubKey = new bytes(64);\n        \n        // Skip \"st:lyx:\" prefix (7 bytes) and copy keys\n        uint256 offset = 7;\n        for(uint i = 0; i < 64; i++) {\n            spendingPubKey[i] = metaAddress[offset + i];\n            viewingPubKey[i] = metaAddress[offset + 64 + i];\n        }\n    }\n\n    /**\n     * @dev Generate a stealth address from public keys\n     * @param spendingPubKey The spending public key\n     * @param viewingPubKey The viewing public key\n     * @return stealthAddress The generated stealth address\n     * @return ephemeralPubKey The ephemeral public key\n     * @return viewTag The view tag\n     */\n    function generateStealthAddress(\n        bytes memory spendingPubKey, \n        bytes memory viewingPubKey\n    ) \n        internal \n        view \n        returns (\n            address stealthAddress,\n            bytes memory ephemeralPubKey,\n            bytes1 viewTag\n        ) \n    {\n        // Generate ephemeral key pair using block data for randomness\n        bytes32 ephemeralPrivKey = keccak256(\n            abi.encodePacked(\n                block.timestamp, \n                block.prevrandao, \n                msg.sender,\n                spendingPubKey,\n                viewingPubKey\n            )\n        );\n\n        // Generate ephemeral public key (in production this would use proper ECC)\n        ephemeralPubKey = abi.encodePacked(\n            keccak256(abi.encodePacked(\"ephemeral\", ephemeralPrivKey))\n        );\n\n        // Generate shared secret using ECDH simulation\n        bytes32 sharedSecret = keccak256(\n            abi.encodePacked(\n                ephemeralPrivKey,\n                viewingPubKey\n            )\n        );\n\n        // Generate stealth address\n        stealthAddress = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            sharedSecret,\n                            spendingPubKey\n                        )\n                    )\n                )\n            )\n        );\n\n        // Generate view tag (first byte of shared secret)\n        viewTag = bytes1(uint8(uint256(sharedSecret) & 0xFF));\n    }\n\n    /**\n     * @dev Compute a shared secret between two parties\n     * @param privateKey The private key\n     * @param publicKey The public key\n     * @return The shared secret\n     */\n    function computeSharedSecret(\n        bytes32 privateKey,\n        bytes memory publicKey\n    ) \n        internal \n        pure \n        returns (bytes32) \n    {\n        return keccak256(abi.encodePacked(privateKey, publicKey));\n    }\n} "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}