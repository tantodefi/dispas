{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IDispas.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport { DataTypes } from \"../protocol/libraries/DataTypes.sol\";\n\n/**\n * @title IDispas - Interface for LYX Distribution Contract\n * @author Valentine Orga\n * @notice Defines the interface for Dispas, a contract that allows LYX distribution to multiple addresses.\n */\ninterface IDispas {\n    /// @notice Emitted when LYX is successfully distributed to multiple recipients.\n    /// @param sender The address that initiated the distribution.\n    /// @param totalAmount The total LYX amount distributed.\n    event FundsDistributed(address indexed sender, uint256 totalAmount);\n\n    /// @notice Emitted when a single recipient successfully receives LYX.\n    /// @param recipient The address that received the payment.\n    /// @param amount The amount of LYX sent.\n    event PaymentSent(address indexed recipient, uint256 amount);\n\n    /**\n     * @notice Distributes LYX to multiple recipients.\n     * @dev Requires that each recipient is a valid address and receives a non-zero amount.\n     *      The total distributed amount must match `msg.value`.\n     * @param payments An array of `Payment` structs containing recipient addresses and corresponding amounts.\n     */\n    function distributeFunds(DataTypes.Payment[] calldata payments) external payable;\n}\n"
    },
    "contracts/interfaces/IERC5564Announcer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\ninterface IERC5564Announcer {\n    event Announcement(\n        uint256 indexed schemeId,\n        address indexed stealthAddress,\n        address indexed caller,\n        bytes ephemeralPubKey,\n        bytes metadata\n    );\n\n    function announce(\n        uint256 schemeId,\n        address stealthAddress,\n        bytes memory ephemeralPubKey,\n        bytes memory metadata\n    ) external;\n} "
    },
    "contracts/protocol/DisapStealth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport { IDispas } from \"../interfaces/IDispas.sol\";\nimport { DataTypes } from \"./libraries/DataTypes.sol\";\nimport { IERC5564Announcer } from \"../interfaces/IERC5564Announcer.sol\";\nimport { StealthAddressLib } from \"./libraries/StealthAddress.sol\";\n\n/**\n * @title DispasStealth - A Gas-Efficient LYX Distributor with Stealth Address Support\n * @author Tantodefi.eth and Valentine Orga\n * @notice This contract allows users to split LYX payments among multiple recipients using stealth addresses\n * @dev Extends Dispas with ERC-5564 stealth address support\n */\ncontract DispasStealth is IDispas {\n    // ==========================\n    // Constants\n    // ==========================\n    IERC5564Announcer public immutable STEALTH_ANNOUNCER;\n    uint256 constant SCHEME_ID = 1; // Using the default SECP256k1 scheme\n\n    // ==========================\n    // Errors\n    // ==========================\n    error DispasStealth__ZeroAddress();\n    error DispasStealth__ZeroAmount();\n    error DispasStealth__InsufficientValue();\n    error DispasStealth__TransferFailed(address recipient, uint256 amount);\n    error DispasStealth__InvalidStealthMetaAddress();\n\n    // ==========================\n    // Events\n    // ==========================\n    event StealthPaymentSent(\n        address indexed sender,\n        bytes stealthMetaAddress,\n        address indexed stealthAddress,\n        uint256 amount\n    );\n\n    // ==========================\n    // Structs\n    // ==========================\n    struct StealthPayment {\n        bytes stealthMetaAddress;\n        uint256 amount;\n    }\n\n    // ==========================\n    // Functions\n    // ==========================\n\n    constructor(address announcer) {\n        STEALTH_ANNOUNCER = IERC5564Announcer(announcer);\n    }\n\n    /// @inheritdoc IDispas\n    function distributeFunds(DataTypes.Payment[] calldata payments) external payable {\n        uint256 distributedAmount = 0;\n        uint256 paymentsLength = payments.length;\n\n        for (uint256 i = 0; i < paymentsLength; i++) {\n            DataTypes.Payment calldata payment = payments[i];\n            \n            require(payment.recipient != address(0), \"DispasStealth__ZeroAddress\");\n            require(payment.amount != 0, \"DispasStealth__ZeroAmount\");\n\n            distributedAmount += payment.amount;\n            if (distributedAmount > msg.value) revert DispasStealth__InsufficientValue();\n\n            (bool success, ) = payment.recipient.call{ value: payment.amount }(\"\");\n            require(success, \"DispasStealth__TransferFailed\");\n        }\n\n        emit FundsDistributed(msg.sender, msg.value);\n    }\n\n    /// @notice Distributes funds to stealth addresses\n    /// @param payments Array of stealth payments to process\n    function distributeStealthFunds(StealthPayment[] calldata payments) external payable {\n        uint256 distributedAmount = 0;\n        uint256 paymentsLength = payments.length;\n\n        for (uint256 i = 0; i < paymentsLength; i++) {\n            StealthPayment calldata payment = payments[i];\n            require(payment.amount != 0, \"DispasStealth__ZeroAmount\");\n\n            // Parse stealth meta-address and generate stealth address\n            (bytes memory spendingPubKey, bytes memory viewingPubKey) = \n                StealthAddressLib.parseStealthMetaAddress(payment.stealthMetaAddress);\n                \n            // Generate ephemeral key and stealth address\n            (address stealthAddress, bytes memory ephemeralPubKey, bytes1 viewTag) = \n                StealthAddressLib.generateStealthAddress(spendingPubKey, viewingPubKey);\n\n            distributedAmount += payment.amount;\n            if (distributedAmount > msg.value) revert DispasStealth__InsufficientValue();\n\n            // Send payment to stealth address\n            (bool success, ) = stealthAddress.call{ value: payment.amount }(\"\");\n            require(success, \"DispasStealth__TransferFailed\");\n\n            // Announce the stealth payment\n            bytes memory metadata = generateMetadata(viewTag, payment.amount);\n            STEALTH_ANNOUNCER.announce(\n                SCHEME_ID,\n                stealthAddress,\n                ephemeralPubKey,\n                metadata\n            );\n\n            emit StealthPaymentSent(\n                msg.sender,\n                payment.stealthMetaAddress,\n                stealthAddress,\n                payment.amount\n            );\n        }\n\n        emit FundsDistributed(msg.sender, msg.value);\n    }\n\n    /// @dev Generates metadata for the stealth announcement\n    /// @param viewTag The view tag for the stealth address\n    /// @param amount The amount being sent\n    function generateMetadata(bytes1 viewTag, uint256 amount) internal pure returns (bytes memory) {\n        bytes memory metadata = new bytes(57);\n        \n        // First byte is view tag\n        metadata[0] = viewTag;\n        \n        // Bytes 2-5 are 0xeeeeeeee for native token\n        metadata[1] = 0xee;\n        metadata[2] = 0xee;\n        metadata[3] = 0xee;\n        metadata[4] = 0xee;\n        \n        // Bytes 6-25 are the ETH pseudo-address\n        address eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n        assembly {\n            mstore(add(metadata, 26), eth)\n        }\n        \n        // Bytes 26-57 are the amount\n        assembly {\n            mstore(add(metadata, 58), amount)\n        }\n        \n        return metadata;\n    }\n\n    /// @dev Fallback function to prevent accidental LYX deposits\n    receive() external payable {\n        revert(\"Direct deposits not allowed\");\n    }\n} "
    },
    "contracts/protocol/Dispas.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport { IDispas } from \"../interfaces/IDispas.sol\";\nimport { DataTypes } from \"./libraries/DataTypes.sol\";\n\n/**\n * @title Dispas - A Gas-Efficient LYX Distributor\n * @author Valentine Orga\n * @notice This contract allows users to split LYX payments among multiple recipients.\n * @dev Uses a single loop for efficiency, calldata structs to minimize gas, and robust error handling.\n */\ncontract Dispas is IDispas {\n    // ==========================\n    // Errors\n    // ==========================\n    error Dispas__ZeroAddress();\n    error Dispas__ZeroAmount();\n    error Dispas__InsufficientValue();\n    error Dispas__TransferFailed(address recipient, uint256 amount);\n\n    // ==========================\n    // Functions\n    // ==========================\n\n    /// @inheritdoc IDispas\n    function distributeFunds(DataTypes.Payment[] calldata payments) external payable {\n        uint256 distributedAmount = 0;\n        uint256 paymentsLength = payments.length;\n\n        for (uint256 i = 0; i < paymentsLength; i++) {\n            DataTypes.Payment calldata payment = payments[i];\n\n            // validate input\n            require(payment.recipient != address(0), Dispas__ZeroAddress());\n            require(payment.amount != 0, Dispas__ZeroAmount());\n\n            // track total distribution\n            distributedAmount += payment.amount;\n\n            // ensure distributed amount does not exceed the full msg.value\n            if (distributedAmount > msg.value) revert Dispas__InsufficientValue();\n\n            // attempt transfer\n            (bool success, ) = payment.recipient.call{ value: payment.amount }(\"\");\n            require(success, Dispas__TransferFailed(payment.recipient, payment.amount));\n        }\n\n        // emit event for overall distribution\n        emit FundsDistributed(msg.sender, msg.value);\n    }\n\n    /// @dev Fallback function to prevent accidental LYX deposits.\n    receive() external payable {\n        revert(\"Direct deposits not allowed\");\n    }\n}\n"
    },
    "contracts/protocol/ERC5564Announcer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport { IERC5564Announcer } from \"../interfaces/IERC5564Announcer.sol\";\n\ncontract ERC5564Announcer is IERC5564Announcer {\n    function announce(\n        uint256 schemeId,\n        address stealthAddress,\n        bytes memory ephemeralPubKey,\n        bytes memory metadata\n    ) external {\n        emit Announcement(\n            schemeId,\n            stealthAddress,\n            msg.sender,\n            ephemeralPubKey,\n            metadata\n        );\n    }\n} "
    },
    "contracts/protocol/ERC5564Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\ninterface IERC5564Registry {\n    event StealthMetaAddressSet(address indexed registrant, string stealthMetaAddress);\n\n    function setStealthMetaAddress(string memory stealthMetaAddress) external;\n    function setStealthMetaAddressFor(\n        address registrant,\n        string memory stealthMetaAddress,\n        bytes memory signature\n    ) external;\n    function getStealthMetaAddress(address registrant) external view returns (string memory);\n}\n\ncontract ERC5564Registry is IERC5564Registry {\n    mapping(address => string) private _stealthMetaAddresses;\n\n    function setStealthMetaAddress(string memory stealthMetaAddress) external {\n        _stealthMetaAddresses[msg.sender] = stealthMetaAddress;\n        emit StealthMetaAddressSet(msg.sender, stealthMetaAddress);\n    }\n\n    function setStealthMetaAddressFor(\n        address registrant,\n        string memory stealthMetaAddress,\n        bytes memory signature\n    ) external {\n        bytes32 messageHash = keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                keccak256(abi.encodePacked(stealthMetaAddress))\n            )\n        );\n        address signer = recoverSigner(messageHash, signature);\n        require(signer == registrant, \"Invalid signature\");\n\n        _stealthMetaAddresses[registrant] = stealthMetaAddress;\n        emit StealthMetaAddressSet(registrant, stealthMetaAddress);\n    }\n\n    function getStealthMetaAddress(address registrant) external view returns (string memory) {\n        return _stealthMetaAddresses[registrant];\n    }\n\n    function recoverSigner(bytes32 messageHash, bytes memory signature) internal pure returns (address) {\n        require(signature.length == 65, \"Invalid signature length\");\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        assembly {\n            r := mload(add(signature, 32))\n            s := mload(add(signature, 64))\n            v := byte(0, mload(add(signature, 96)))\n        }\n\n        if (v < 27) v += 27;\n        require(v == 27 || v == 28, \"Invalid signature 'v' value\");\n\n        return ecrecover(messageHash, v, r, s);\n    }\n} "
    },
    "contracts/protocol/libraries/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/**\n * @title DataTypes Library\n * @author\n * @notice Defines common data structures used in the Dispas contract.\n * @dev This library is used to standardize data structures across the contract.\n */\nlibrary DataTypes {\n    /**\n     * @notice Represents a payment entry in the distribution process.\n     * @dev Used in the `distributeFunds` function to store recipient details.\n     * @param recipient The address receiving the payment.\n     * @param amount The amount of LYX to be sent.\n     */\n    struct Payment {\n        address recipient;\n        uint256 amount;\n    }\n}\n"
    },
    "contracts/protocol/libraries/StealthAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nlibrary StealthAddressLib {\n    error InvalidStealthMetaAddress();\n    error InvalidSchemeId();\n\n    /**\n     * @dev Parse a stealth meta-address into its components\n     * @param metaAddress The stealth meta-address in bytes format\n     * @return spendingPubKey The spending public key\n     * @return viewingPubKey The viewing public key\n     */\n    function parseStealthMetaAddress(bytes calldata metaAddress) \n        internal \n        pure \n        returns (bytes memory spendingPubKey, bytes memory viewingPubKey) \n    {\n        // Validate meta-address format (st:lyx: + 64 bytes spending + 64 bytes viewing)\n        if (metaAddress.length < 133) revert InvalidStealthMetaAddress();\n\n        // Extract public keys from meta-address\n        // Format: st:lyx:<spending_pub_key>:<viewing_pub_key>\n        spendingPubKey = new bytes(64);\n        viewingPubKey = new bytes(64);\n        \n        // Skip \"st:lyx:\" prefix (7 bytes) and copy keys\n        uint256 offset = 7;\n        for(uint i = 0; i < 64; i++) {\n            spendingPubKey[i] = metaAddress[offset + i];\n            viewingPubKey[i] = metaAddress[offset + 64 + i];\n        }\n    }\n\n    /**\n     * @dev Generate a stealth address from public keys\n     * @param spendingPubKey The spending public key\n     * @param viewingPubKey The viewing public key\n     * @return stealthAddress The generated stealth address\n     * @return ephemeralPubKey The ephemeral public key\n     * @return viewTag The view tag\n     */\n    function generateStealthAddress(\n        bytes memory spendingPubKey, \n        bytes memory viewingPubKey\n    ) \n        internal \n        view \n        returns (\n            address stealthAddress,\n            bytes memory ephemeralPubKey,\n            bytes1 viewTag\n        ) \n    {\n        // Generate ephemeral key pair using block data for randomness\n        bytes32 ephemeralPrivKey = keccak256(\n            abi.encodePacked(\n                block.timestamp, \n                block.prevrandao, \n                msg.sender,\n                spendingPubKey,\n                viewingPubKey\n            )\n        );\n\n        // Generate ephemeral public key (in production this would use proper ECC)\n        ephemeralPubKey = abi.encodePacked(\n            keccak256(abi.encodePacked(\"ephemeral\", ephemeralPrivKey))\n        );\n\n        // Generate shared secret using ECDH simulation\n        bytes32 sharedSecret = keccak256(\n            abi.encodePacked(\n                ephemeralPrivKey,\n                viewingPubKey\n            )\n        );\n\n        // Generate stealth address\n        stealthAddress = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            sharedSecret,\n                            spendingPubKey\n                        )\n                    )\n                )\n            )\n        );\n\n        // Generate view tag (first byte of shared secret)\n        viewTag = bytes1(uint8(uint256(sharedSecret) & 0xFF));\n    }\n\n    /**\n     * @dev Compute a shared secret between two parties\n     * @param privateKey The private key\n     * @param publicKey The public key\n     * @return The shared secret\n     */\n    function computeSharedSecret(\n        bytes32 privateKey,\n        bytes memory publicKey\n    ) \n        internal \n        pure \n        returns (bytes32) \n    {\n        return keccak256(abi.encodePacked(privateKey, publicKey));\n    }\n} "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}